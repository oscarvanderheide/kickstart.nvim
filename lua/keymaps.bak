local function map(mode, lhs, rhs, opts)
  opts = opts or { silent = true }
  vim.keymap.set(mode, lhs, rhs, opts)
end

-- Clear highlights on search when pressing <Esc> in normal mode
map('n', '<Esc>', '<cmd>nohlsearch<CR>')

-- Diagnostic keymaps
map('n', '<leader>q', vim.diagnostic.setloclist, { desc = 'Open diagnostic [Q]uickfix list' })

-- Exit terminal mode in the builtin terminal with a shortcut
map('t', '<Esc><Esc>', '<C-\\><C-n>', { desc = 'Exit terminal mode' })

-- Disable arrow keys in normal mode
map('n', '<left>', '<cmd>echo "Use h to move!!"<CR>')
map('n', '<right>', '<cmd>echo "Use l to move!!"<CR>')
map('n', '<up>', '<cmd>echo "Use k to move!!"<CR>')
map('n', '<down>', '<cmd>echo "Use j to move!!"<CR>')

-- Keybinds to make split navigation easier
map('n', '<C-h>', '<C-w><C-h>', { desc = 'Move focus to the left window' })
map('n', '<C-l>', '<C-w><C-l>', { desc = 'Move focus to the right window' })
map('n', '<C-j>', '<C-w><C-j>', { desc = 'Move focus to the lower window' })
map('n', '<C-k>', '<C-w><C-k>', { desc = 'Move focus to the upper window' })

-- Modify half-page up and down to center the screen
map('n', '<C-d>', '<C-d>zz', { desc = 'Half page down and center' })
map('n', '<C-u>', '<C-u>zz', { desc = 'Half page up and center' })

-- Keep cursor in the middle when pressing n or N in search mode
map('n', 'n', 'nzzzv', { desc = 'Center after going to next search item' })
map('n', 'N', 'Nzzzv', { desc = 'Center after going to previous search item' })

-- Move lines selected in V mode up or down
map('v', 'J', ":m '>+1<CR>gv=gv")
map('v', 'K', ":m '<-2<CR>gv=gv")


-- Molten keymaps
map('n', '<localleader>mi', ':MoltenInit<CR>', { desc = 'Initialize the plugin' })
map('n', '<localleader>e', ':MoltenEvaluateOperator<CR>', { desc = 'Run operator selection' })
map('n', '<localleader>rl', ':MoltenEvaluateLine<CR>', { desc = 'Evaluate line' })
map('n', '<localleader>rr', ':MoltenReevaluateCell<CR>', { desc = 'Re-evaluate cell' })
map('v', '<localleader>r', ':<C-u>MoltenEvaluateVisual<CR>gv', { desc = 'Evaluate visual selection' })

-- Start new session using tmux-sessionizer
map('n', '<C-f>', '<cmd>silent !tmux neww tmux-sessionizer.sh<CR>')

-- IPython-cell configuration
map('n', '<leader>ps', ':SlimeSend1 ipython --matplotlib<CR>', { desc = 'Start IPython' })
map('n', '<leader>pr', ':IPythonCellRun<CR>', { desc = 'Run script' })
map('n', '<leader>pR', ':IPythonCellRunTime<CR>', { desc = 'Run script with timing' })
map('n', '<leader>pc', ':IPythonCellExecuteCell<CR>', { desc = 'Execute current cell' })
map('n', '<leader>pC', ':IPythonCellExecuteCellJump<CR>', { desc = 'Execute cell and jump to next' })
map('n', '<leader>pl', ':IPythonCellClear<CR>', { desc = 'Clear IPython screen' })
map('n', '<leader>px', ':IPythonCellClose<CR>', { desc = 'Close all Matplotlib figures' })
map('n', '<leader>ph', '<Plug>SlimeLineSend', { desc = 'Send line to IPython' })
map('x', '<leader>ph', '<Plug>SlimeRegionSend', { desc = 'Send selection to IPython' })
map('n', '<leader>pp', ':IPythonCellPrevCommand<CR>', { desc = 'Run previous command' })
map('n', '<leader>pQ', ':IPythonCellRestart<CR>', { desc = 'Restart IPython' })
map('n', '<leader>pd', ':SlimeSend1 %debug<CR>', { desc = 'Start debug mode' })
map('n', '<leader>pq', ':SlimeSend1 exit<CR>', { desc = 'Exit debug mode/IPython' })
map('n', '<F9>', ':IPythonCellInsertAbove<CR>a', { desc = 'Insert cell above' })
map('n', '<F10>', ':IPythonCellInsertBelow<CR>a', { desc = 'Insert cell below' })
map('i', '<F9>', '<C-o>:IPythonCellInsertAbove<CR>', { desc = 'Insert cell above (insert mode)' })
map('i', '<F10>', '<C-o>:IPythonCellInsertBelow<CR>', { desc = 'Insert cell below (insert mode)' })

-- Python-specific keymaps enabled through an autocommand
-- function SET_PYTHON_KEYMAPS()
--     map('n', '{', ':IPythonCellPrevCell<CR>', { desc = 'Jump to previous cell' })
--         map('n', '}', ':IPythonCellNextCell<CR>', { desc = 'Jump to next cell' })
--             map('n', '<S-CR>', ':IPythonCellExecuteCellJump<CR>', { desc = 'Jump to next cell' })
--                 map('n', '<leader>pi', IPythonOpen, { desc = 'Open IPython in terminal' })
--                 end

--                 -- vim: ts=2 sts=2 sw=2 et
